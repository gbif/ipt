#summary Developer Frequently Asked Questions

<wiki:toc max_depth="2" />

-----
= Configuration files =
 * web.xml
 * struts.xml (configures all actions and URL mappings)
 * hibernate.cfg.xml
 * urlrewrite.xml (RESTFUL to url parameter rewriting)
 * applicationContext.xml (Spring beans) 
   # applicationContext-dao.xml
   # applicationContext-i18n-maps.xml
   # applicationContext-resources.xml
   # applicationContext-service.xml 
   # applicationContext-struts.xml
   # applicationContext.xml

== Properties Files ==
 * application.properties (IPT app settings) 
 * ipt.properties (user configurable domain, base URL, data directory, mail settings)
 * velocity.properties (static)
 * displaytag.properties (static)
 * xwork-conversion.properties (static)


-----
= Persistence & Service Layers =
IPT uses a simple 2-Tier architecture with DAO and services merged into a single service layer. With the exception of AppFuse user management is 3-tier DAO and services - which should be migrated to 2tiers when moving into ipt packages.

== IPT data directory layout ==
See AppConfig in particular. The web context property resolver is used to find the absolute webapp dir at runtime regardless of which app server and JVM location.
{{{
WebContextPropertyResolver.java
AppConfig.java
}}}



-----
= Struts, Webframework & URLs =
== Html templates/rendering ==
We use [http://www.opensymphony.com/sitemesh/ sitemesh] to do the basic page layout, i.e. 2 or 3 column layout with header, menu and footer. The different layouts are created by respective _page decorators_ in sitemesh terminology.

=== Sitemesh configuration ===
 * src/main/webapp/WEB-INF/decorators.xml
 * src/main/webapp/WEB-INF/sitemesh.xml

=== Main templates used in page layout ===
 * src/main/webapp/decorators/default.jsp
 * src/main/webapp/common/xxx.jsp


==URL rewrite and pretty URLs==
Struts2 doesnt provide simple native means to create pretty URLs with parameters as part of the URL.
We use urlrewrite for those URLs, e.g.  http://localhost/resource/91c20216-1d89-4201-87cc-143e1655f44f/archive-dwc.zip get rewritten into http://localhost/archive.do?guid=91c20216-1d89-4201-87cc-143e1655f44f&format=dwc

The resource file urlrewrite.xml defines the rewrite patterns in a very readable way. Notice that URL rewrites take place before the request is even dispatched to struts2! 

Also notice that rewrites are different from redirects. Rewrites internally rewrite a URL and return the content of the newly generated URL - but the client is not aware of this at all! Redirects on the other hand redirect the client to a new URL which is then being served in a seperate request.

== Internationalization ==
Internationalisation is done on templates (.ftl, .jsp) and action classes using java resource bundles in src/main/resources/ApplicationResources.properties. Resource bundles finally have to be encoded as latin1 and other unicode characters need to be escaped. This is ok for western languages with few special unicode characters, but especially for asian languages this is unwieldy. We therefore encode the proeprty files in UTF8 and use the native2ascii maven plugin to process the files into valid property files.

 * [http://struts.apache.org/2.x/docs/text.html Struts2 i18n]
 * http://java.sun.com/j2se/1.5.0/docs/tooldocs/windows/native2ascii.html
 * http://mojo.codehaus.org/native2ascii-maven-plugin/native2ascii-mojo.html

A nice tool to help translation is Attesoro. It will mean we have to work with valid property files from the beginning though, removing the native2ascii plugin and utf8 bundles:
 * http://attesoro.org/screenshot.html

=== SimpleTextProvider ===
The default struts2 text provider has been replaced by a very simple one that does not traverse the classpathes to find several resource bundles, but always picks the fixed, single ApplicationResources.properties. This is much more efficient and gives us more control about the default locale being used. It hooks into the BaseAction TextProvider interface.

== Form validation ==
For validation native struts2 validation is used. An action or model class can define validation rules encoded as xml resource files, e.g. [http://gbif-providertoolkit.googlecode.com/svn/branches/ipt-1.0RC3-appfuse/src/main/resources/org/gbif/provider/model/User-validation.xml /main/resources/org/gbif/provider/model/User-validation.xml]. See [http://struts.apache.org/2.0.14/docs/validation.html struts2 documentation].

== Authentication & Security ==
IPT makes use of the spring security framework introduced by the original appfuse framework. User accounts and roles are kept locally in the H2 database via hibernate persistence - just as any other data.
=== Login / Logout ===
Login and logout makes use of the native java application server features, j_security_check, j_username, j_password
Both jsp pages are wired in struts, default package, so they can access all struts variables and i18N.
=== Restricting acccess to pages ===
The security.xml file defines URL patterns that can define required roles for visiting those pages. For examples:
{{{
        <intercept-url pattern="/manage/*" access="ROLE_ADMIN,ROLE_MANAGER"/>
}}}



-----
= Javascipt & AJAX =
we use [http://docs.jquery.com/ jQuery] for all javascript. Please *dont't* use Dojo which comes bundled with Struts2.0.x, but which is removed from the core of Struts2.1 to which we will hope to upgrade eventually. Please also refrain from using any other javascript framework!

== jQuery ==
== autocomplete ==


-----
= IPT Business Logic =
== Upload Process ==

http://www.websequencediagrams.com/cgi-bin/cdraw?lz=U291cmNlLT5JbXBvcnRBY3Rpb246IHVwbG9hZAoACQwtPkNhY2hlTWFuYWdlcjogcnVuVQAgBm5vdGUgcmlnaHQgb2YgABgOQXN5bmNocm9ub3VzIGNvdXBsaW5nIHVzaW5nIEpESyBGdXR1cmU8AEQGRXZlbnQ-CgBcDACBEQhUYXNrOiBjYWxsKCkAgRAHVGFzawARDmluaXQoKQCBAQ8ANAxyZXNldACBAwVudHMsIAAIBWZsYWdzIChlLmcuIGRlcml2ZWRUYXhvbm9teT8AXQ4AgXIOcHJlcGFyZQCBfgYAbghvdmVyAIFzD2ZsYWdBc0RlbGV0ZWRcbnJlbW92ZUQAYwZEYXRhIChFLmcuIHQAbgZpYyAvIGdlb2dyYXBoaWNhbCBoaWVyYXJjaGllcykANwhTdGF0cwBECEV4dGVuc2lvbkRhdGEAWQhBcmNoaXZlcwCCHw0AgX8NaQCDbAVDb3JlAIIWHWRldGVybWluZSBpZiBtb2RpZmllZFxudXBkYXRlIC8gaW5zZXJ0c1xuY3JlYXRlIGFubm90YXRpb25zIGZvciBiYWQgcm93cwpsb29wIEZvciBlYWNoIGUAgS0IIHR5cGUKIACDHAsAg0UPAIUTBQCBWwkoKQogIACCYQoAVVVlbmQAhGgcbG9zZQCEdg8AhFUQb2x2ZSBpZHMgcmVmZXJlbmNlZCBieSBuYW1lIGZpZWxkcyAoYmFzaW9ueW1zLCBoaWdoZXIgdGF4YSBldGMAQRsAglcHZSBhbWJpZ3VvdXMAUAUAg0wbYnVpbGQgbmVzdGVkAIVrBigAYwUAhFsLZXMAgTMbAINiB3N0YXQARSFEd0MtQQCEWBpnZW5lcmF0ZSBMdWNlbmUgaW5kZXgK&s=modern-blue&foo.png

[http://www.websequencediagrams.com/?lz=U291cmNlLT5JbXBvcnRBY3Rpb246IHVwbG9hZAoACQwtPkNhY2hlTWFuYWdlcjogcnVuVQAgBm5vdGUgcmlnaHQgb2YgABgOQXN5bmNocm9ub3VzIGNvdXBsaW5nIHVzaW5nIEpESyBGdXR1cmU8AEQGRXZlbnQ-CgBcDACBEQhUYXNrOiBjYWxsKCkAgRAHVGFzawARDmluaXQoKQCBAQ8ANAxyZXNldACBAwVudHMsIAAIBWZsYWdzIChlLmcuIGRlcml2ZWRUYXhvbm9teT8AXQ4AgXIOcHJlcGFyZQCBfgYAbghvdmVyAIFzD2ZsYWdBc0RlbGV0ZWRcbnJlbW92ZUQAYwZEYXRhIChFLmcuIHQAbgZpYyAvIGdlb2dyYXBoaWNhbCBoaWVyYXJjaGllcykANwhTdGF0cwBECEV4dGVuc2lvbkRhdGEAWQhBcmNoaXZlcwCCHw0AgX8NaQCDbAVDb3JlAIIWHWRldGVybWluZSBpZiBtb2RpZmllZFxudXBkYXRlIC8gaW5zZXJ0c1xuY3JlYXRlIGFubm90YXRpb25zIGZvciBiYWQgcm93cwpsb29wIEZvciBlYWNoIGUAgS0IIHR5cGUKIACDHAsAg0UPAIUTBQCBWwkoKQogIACCYQoAVVVlbmQAhGgcbG9zZQCEdg8AhFUQb2x2ZSBpZHMgcmVmZXJlbmNlZCBieSBuYW1lIGZpZWxkcyAoYmFzaW9ueW1zLCBoaWdoZXIgdGF4YSBldGMAQRsAglcHZSBhbWJpZ3VvdXMAUAUAg0wbYnVpbGQgbmVzdGVkAIVrBigAYwUAhFsLZXMAgTMbAINiB3N0YXQARSFEd0MtQQCEWBpnZW5lcmF0ZSBMdWNlbmUgaW5kZXg&s=modern-blue Edit]

== Registry and Publication Process ==