<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.gbif</groupId>
    <artifactId>motherpom</artifactId>
    <version>56</version>
  </parent>

  <artifactId>ipt</artifactId>
  <version>2.7.8-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>IPT</name>
  <description>The GBIF Integrated Publishing Toolkit</description>
  <url>https://github.com/gbif/ipt</url>

  <!--
   Default settings used mainly for development.
   To build a release please use -P release
   -->
  <properties>
    <!--
      maven treats properties as strings only, so we cannot negate a boolean devMode value.
      Therefore, we keep both available - make sure they are always negated in all profiles!
      -->
    <devMode>false</devMode>
    <devModeNegated>true</devModeNegated>
    <jetty.port>7001</jetty.port>

    <analytics.key />
    <ipt.frontPageImageURL />
    <google.maps.key />
    <ipt.baseURL />

    <!-- The datadir for tests that use a guice injected DataDir object -->
    <test.datadir>/tmp/test-datadir</test.datadir>

    <!-- GBIF dependencies -->
    <dwc-api.version>1.47</dwc-api.version>
    <dwca-io.version>2.16</dwca-io.version>
    <gbif-api.version>1.12.11</gbif-api.version>
    <gbif-common.version>0.60</gbif-common.version>
    <gbif-doi.version>2.21</gbif-doi.version>
    <gbif-metadata-profile.version>2.1</gbif-metadata-profile.version>
    <gbif-parsers.version>0.62</gbif-parsers.version>
    <gbif-httputils.version>1.4</gbif-httputils.version>

    <!-- Third party dependencies -->
    <apache-poi.version>5.2.4</apache-poi.version>
    <bcrypt.version>0.10.2</bcrypt.version>
    <commons-digester.version>2.1</commons-digester.version>
    <commons-io.version>2.15.0</commons-io.version>
    <commons-lang3.version>3.14.0</commons-lang3.version>
    <commons-collections4.version>4.4</commons-collections4.version>
    <commons-validator.version>1.7</commons-validator.version>
    <commons-text.version>1.11.0</commons-text.version>
    <excel-streaming-reader.version>4.2.0</excel-streaming-reader.version>
    <freemarker.version>2.3.32</freemarker.version>
    <gson.version>2.10.1</gson.version>
    <guava.version>20.0</guava.version>
    <guice.version>4.2.3</guice.version>
    <httpclient.version>4.5.14</httpclient.version>
    <httpcore.version>4.4.16</httpcore.version>
    <javassist.version>3.12.1.GA</javassist.version>
    <javax.mail.version>1.4.7</javax.mail.version>
    <jersey.version>1.19.4</jersey.version>
    <jetty-maven-plugin.version>9.4.53.v20231009</jetty-maven-plugin.version>
    <jsp-api.version>2.0</jsp-api.version>
    <jsr305.version>3.0.2</jsr305.version>
    <junit.version>5.10.1</junit.version>
    <log4j.version>2.22.0</log4j.version>
    <mockito.version>4.11.0</mockito.version>
    <openrtf.version>1.2.1</openrtf.version>
    <owasp-java-html-sanitizer.version>20220608.1</owasp-java-html-sanitizer.version>
    <servlet-api.version>3.0.1</servlet-api.version>
    <struts2.version>2.5.32</struts2.version>
    <validation-api.version>2.0.1.Final</validation-api.version>
    <!-- NB XStream does not use semantic versioning.  Take care when upgrading, as we need to
         ensure the IPT can still load existing resource.xml and other configuration files -->
    <xstream.version>1.4.20</xstream.version>
    <jaxb-api.version>2.3.1</jaxb-api.version>
    <jaxb-runtime.version>2.3.9</jaxb-runtime.version>

    <!-- JDBC drivers -->
    <jtds.version>1.3.1</jtds.version>
    <mssql-jdbc.version>12.4.2.jre8</mssql-jdbc.version>
    <mysql-connector-java.version>8.0.33</mysql-connector-java.version>
    <ojdbc.version>23.3.0.23.09</ojdbc.version>
    <postgresql.version>42.7.0</postgresql.version>

    <!-- Plugins -->
    <buildnumber-maven-plugin.version>1.4</buildnumber-maven-plugin.version>
    <native2ascii-maven-plugin.version>2.1.0</native2ascii-maven-plugin.version>
    <maven-war-plugin.version>3.4.0</maven-war-plugin.version>
  </properties>

  <developers>
    <developer>
      <name>Tim Robertson</name>
      <email>trobertson@gbif.org</email>
    </developer>
    <developer>
      <name>Matt Blissett</name>
      <email>mblissett@gbif.org</email>
    </developer>
    <developer>
      <name>Mikhail Podolskiy</name>
      <email>mpodolskiy@gbif.org</email>
    </developer>
  </developers>

  <mailingLists>
    <mailingList>
      <name>IPT User &amp; Developer List</name>
      <post>ipt@lists.gbif.org</post>
      <subscribe>ipt-subscribe@lists.gbif.org</subscribe>
      <unsubscribe>ipt-unsubscribe@lists.gbif.org</unsubscribe>
      <archive>https://lists.gbif.org/pipermail/ipt/</archive>
    </mailingList>
  </mailingLists>

  <scm>
    <connection>scm:git:git@github.com:gbif/${project.artifactId}.git</connection>
    <url>https://github.com/gbif/${project.artifactId}</url>
    <developerConnection>scm:git:git@github.com:gbif/${project.artifactId}.git</developerConnection>
    <tag>HEAD</tag>
  </scm>

  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/gbif/ipt/issues</url>
  </issueManagement>

  <ciManagement>
    <url>https://builds.gbif.org/job/ipt/</url>
    <system>jenkins</system>
  </ciManagement>

  <repositories>
    <repository>
      <id>gbif-all</id>
      <url>https://repository.gbif.org/content/groups/gbif</url>
    </repository>
    <repository>
      <id>gbif-thirdparty</id>
      <url>https://repository.gbif.org/content/repositories/thirdparty</url>
    </repository>
    <repository>
      <id>jitpack.io</id>
      <url>https://jitpack.io</url>
    </repository>
  </repositories>

  <build>
    <finalName>ipt-${project.version}-r${buildNumber}</finalName>
    <defaultGoal>jetty:run</defaultGoal>
    <plugins>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>${maven-enforcer-plugin.version}</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
        <version>${maven-release-plugin.version}</version>
        <configuration>
          <useReleaseProfile>false</useReleaseProfile>
          <arguments>-Pgbif-release,release</arguments>
        </configuration>
      </plugin>

      <!--
      To simplify development, allows developers to use "mvn jetty:run"
       Change the port on commandline with -D jetty.port=8080
      -->

      <plugin>
        <!--
          http://wiki.eclipse.org/Jetty/Feature/Jetty_Maven_Plugin
        -->
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-maven-plugin</artifactId>
        <version>${jetty-maven-plugin.version}</version>
        <configuration>
          <webAppConfig>
            <contextPath>/</contextPath>
          </webAppConfig>
          <!-- no scan, don't detect changed classes -->
          <scanIntervalSeconds>0</scanIntervalSeconds>
          <stopKey>stop</stopKey>
          <stopPort>9362</stopPort>
          <systemProperties>
            <systemProperty>
              <name>servername</name>
              <value>http://localhost:${jetty.port}</value>
            </systemProperty>
            <systemProperty>
              <name>org.eclipse.jetty.server.Request.maxFormKeys</name>
              <value>5000</value>
            </systemProperty>
          </systemProperties>
        </configuration>
      </plugin>

      <!--
         small plugin that allows to access the projects SVN revision number.
         Useful to keep the pom ipt version at 1.x-SNAPSHOT while still having a unique build number
         See: http://mojo.codehaus.org/buildnumber-maven-plugin/usage.html
         -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>buildnumber-maven-plugin</artifactId>
        <version>${buildnumber-maven-plugin.version}</version>
        <executions>
          <execution>
            <phase>validate</phase>
            <goals>
              <goal>create</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <doCheck>false</doCheck>
          <doUpdate>false</doUpdate>
          <shortRevisionLength>7</shortRevisionLength>
        </configuration>
      </plugin>

      <!-- https://github.com/mojohaus/native2ascii-maven-plugin/wiki/Usage:-resources -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>native2ascii-maven-plugin</artifactId>
        <version>${native2ascii-maven-plugin.version}</version>
        <executions>
          <execution>
            <id>utf8-to-latin1</id>
            <goals>
              <goal>resources</goal>
            </goals>
            <phase>process-resources</phase>
            <configuration>
              <srcDir>src/main/resources</srcDir>
              <targetDir>${project.build.outputDirectory}</targetDir>
              <encoding>${project.build.sourceEncoding}</encoding>
              <includes>
                <include>ApplicationResources_*.properties</include>
              </includes>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${maven-failsafe-plugin.version}</version>
      </plugin>

      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>${spotless-maven-plugin.version}</version>
      </plugin>

    </plugins>

    <resources>
      <!-- The default resources will all be filtered, i.e. maven variables ${xyz} will be replaced by maven -->
      <resource>
        <directory>src/main/resources</directory>

        <!-- exclude the following files, as they use the same ${} syntax for non maven variables -->
        <excludes>
          <exclude>ApplicationResources*.properties</exclude>
          <exclude>struts*.xml</exclude>
        </excludes>
        <filtering>true</filtering>
      </resource>
      <resource>

        <!-- finally include the excluded files again without filtering -->
        <directory>src/main/resources</directory>
        <includes>
          <include>ApplicationResources*.properties</include>
          <include>struts*.xml</include>
        </includes>
        <filtering>false</filtering>
      </resource>
    </resources>

    <testResources>
      <!-- with filtering copying big test files becomes VERY slow -->
      <testResource>
        <directory>src/test/resources</directory>
        <excludes>
          <exclude>*.properties</exclude>
        </excludes>
        <filtering>false</filtering>
      </testResource>
      <!-- filtering needed for example to populate .yaml file properties from maven variables -->
      <testResource>
        <directory>src/test/resources</directory>
        <includes>
          <include>*.properties</include>
          <include>*.yaml</include>
        </includes>
        <filtering>true</filtering>
      </testResource>
    </testResources>
  </build>

  <dependencies>
    <!-- GBIF dependencies -->
    <dependency>
      <groupId>org.gbif</groupId>
      <artifactId>dwca-io</artifactId>
      <version>${dwca-io.version}</version>
    </dependency>
    <dependency>
      <groupId>org.gbif</groupId>
      <artifactId>gbif-metadata-profile-eml</artifactId>
      <version>${gbif-metadata-profile.version}</version>
    </dependency>
    <dependency>
      <groupId>org.gbif</groupId>
      <artifactId>dwc-api</artifactId>
      <version>${dwc-api.version}</version>
      <exclusions>
        <exclusion>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.gbif</groupId>
      <artifactId>gbif-common</artifactId>
      <version>${gbif-common.version}</version>
    </dependency>
    <dependency>
      <groupId>org.gbif</groupId>
      <artifactId>gbif-httputils</artifactId>
      <version>${gbif-httputils.version}</version>
    </dependency>
    <dependency>
      <groupId>org.gbif</groupId>
      <artifactId>gbif-api</artifactId>
      <version>${gbif-api.version}</version>
      <exclusions>
        <exclusion>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.gbif</groupId>
      <artifactId>gbif-parsers</artifactId>
      <version>${gbif-parsers.version}</version>
      <!-- Exclude name-parser, not used in the IPT -->
      <exclusions>
        <exclusion>
          <groupId>org.gbif</groupId>
          <artifactId>name-parser-v1</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.gbif</groupId>
      <artifactId>gbif-doi</artifactId>
      <version>${gbif-doi.version}</version>
      <exclusions>
        <exclusion>
          <groupId>ch.qos.logback</groupId>
          <artifactId>logback-classic</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <!-- To redirect calls to SLF4J from dwca-reader & gbif-common to Log4J -->
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
      <version>${log4j.version}</version>
      <scope>runtime</scope>
    </dependency>

    <!-- Struts2,  2.3.x series -->
    <dependency>
      <groupId>org.apache.struts</groupId>
      <artifactId>struts2-core</artifactId>
      <version>${struts2.version}</version>
      <exclusions>
        <!-- not needed - we use guice -->
        <exclusion>
          <groupId>org.springframework</groupId>
          <artifactId>spring-test</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <!-- serializes actions into JSON, and used for inventory -->
    <dependency>
      <groupId>org.apache.struts</groupId>
      <artifactId>struts2-json-plugin</artifactId>
      <version>${struts2.version}</version>
    </dependency>
    <!-- required by OGNL/struts2 since version 2.2.x -->
    <dependency>
      <groupId>javassist</groupId>
      <artifactId>javassist</artifactId>
      <version>${javassist.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.freemarker</groupId>
      <artifactId>freemarker</artifactId>
      <version>${freemarker.version}</version>
    </dependency>

    <!-- Guice provides the code based (not XML based) injection dependency framework -->
    <dependency>
      <groupId>com.google.inject</groupId>
      <artifactId>guice</artifactId>
      <version>${guice.version}</version>
      <exclusions>

        <!-- superseded by guava and causing exceptions under tomcat6 -->
        <!--
          java.lang.NoSuchMethodError com.google.common.collect.ImmutableList.copyOf(Ljava/util/Collection;)
        -->
        <exclusion>
          <groupId>com.google.code.google-collections</groupId>
          <artifactId>google-collect</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <!-- connector to use guice natively with struts2 -->
    <dependency>
      <groupId>com.google.inject.extensions</groupId>
      <artifactId>guice-struts2</artifactId>
      <version>${guice.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.google.inject.extensions</groupId>
      <artifactId>guice-assistedinject</artifactId>
      <version>${guice.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.inject.extensions</groupId>
      <artifactId>guice-servlet</artifactId>
      <version>${guice.version}</version>
      <exclusions>
        <exclusion>
          <groupId>javax.servlet</groupId>
          <artifactId>servlet-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>${guava.version}</version>
    </dependency>
    <!-- Used to validate email addresses -->
    <dependency>
      <groupId>javax.mail</groupId>
      <artifactId>mail</artifactId>
      <version>${javax.mail.version}</version>
    </dependency>

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>${servlet-api.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- Accessing different external databases to suck in data alternatively to text files -->
    <!-- JDBC driver to support a variety of external datasources -->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>${mysql-connector-java.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>${postgresql.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>net.sourceforge.jtds</groupId>
      <artifactId>jtds</artifactId>
      <version>${jtds.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.microsoft.sqlserver</groupId>
      <artifactId>mssql-jdbc</artifactId>
      <version>${mssql-jdbc.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.oracle.database.jdbc</groupId>
      <artifactId>ojdbc8</artifactId>
      <version>${ojdbc.version}</version>
      <scope>runtime</scope>
    </dependency>

    <!-- excel parsing -->
    <dependency>
      <groupId>org.apache.poi</groupId>
      <artifactId>poi</artifactId>
      <version>${apache-poi.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.poi</groupId>
      <artifactId>poi-ooxml</artifactId>
      <version>${apache-poi.version}</version>
      <exclusions>
        <exclusion>
          <groupId>dom4j</groupId>
          <artifactId>dom4j</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.github.pjfanning</groupId>
      <artifactId>excel-streaming-reader</artifactId>
      <version>${excel-streaming-reader.version}</version>
    </dependency>


    <!--
      Log4j used directly
      PLEASE DON'T USE COMMONS-LOGGING !!!
      there are some know classloader issues when used with tomcat
    -->
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>${log4j.version}</version>
    </dependency>


    <!-- Commons lang utilities -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>${commons-lang3.version}</version>
    </dependency>
    <!-- URL validation -->
    <dependency>
      <groupId>commons-validator</groupId>
      <artifactId>commons-validator</artifactId>
      <version>${commons-validator.version}</version>
    </dependency>
    <!-- Commons collections, for multi value maps -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-collections4</artifactId>
      <version>${commons-collections4.version}</version>
    </dependency>
    <!-- Commons text, for WordUtils etc. -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-text</artifactId>
      <version>${commons-text.version}</version>
    </dependency>


    <!-- native java io cannot handle redirects -->
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>${httpclient.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpcore</artifactId>
      <version>${httpcore.version}</version>
    </dependency>
    <dependency>
      <groupId>javax.validation</groupId>
      <artifactId>validation-api</artifactId>
      <version>${validation-api.version}</version>
    </dependency>

    <!-- Simple XML Parsing -->
    <dependency>
      <groupId>commons-digester</groupId>
      <artifactId>commons-digester</artifactId>
      <version>${commons-digester.version}</version>
    </dependency>

    <!--
      XStream for resource config data persistence (could be replaced by JAXB in the future)
    -->
    <dependency>
      <groupId>com.thoughtworks.xstream</groupId>
      <artifactId>xstream</artifactId>
      <version>${xstream.version}</version>
    </dependency>

    <!-- file utils -->
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>${commons-io.version}</version>
    </dependency>

    <!-- RTF generation -->
    <dependency>
      <groupId>com.github.librepdf</groupId>
      <artifactId>openrtf</artifactId>
      <version>${openrtf.version}</version>
    </dependency>

    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-core</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-client</artifactId>
      <version>${jersey.version}</version>
    </dependency>

    <!-- JSON representation -->
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <version>${gson.version}</version>
    </dependency>

    <!-- Annotations -->
    <dependency>
      <groupId>com.google.code.findbugs</groupId>
      <artifactId>jsr305</artifactId>
      <version>${jsr305.version}</version>
    </dependency>

    <!-- HTML sanitizer preventing XSS attacks -->
    <dependency>
      <groupId>com.googlecode.owasp-java-html-sanitizer</groupId>
      <artifactId>owasp-java-html-sanitizer</artifactId>
      <version>${owasp-java-html-sanitizer.version}</version>
    </dependency>

    <!-- JAXB (needed for java 11) -->
    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
      <version>${jaxb-api.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jaxb</groupId>
      <artifactId>jaxb-runtime</artifactId>
      <version>${jaxb-runtime.version}</version>
    </dependency>

    <!-- Password hashing -->
    <dependency>
      <groupId>at.favre.lib</groupId>
      <artifactId>bcrypt</artifactId>
      <version>${bcrypt.version}</version>
    </dependency>

    <!-- Test dependencies -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <!-- Settings used for an IPT release -->
    <profile>
      <id>release</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <version>${maven-war-plugin.version}</version>
            <configuration>
              <!-- don't bundle local datadir.location file with generated war -->
              <packagingExcludes>**/datadir.location</packagingExcludes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Settings used for an IPT snapshot build -->
    <profile>
      <id>staging</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <version>${maven-war-plugin.version}</version>
            <configuration>
              <!-- don't bundle local datadir.location file with generated war -->
              <packagingExcludes>**/datadir.location</packagingExcludes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Settings used for local IPT development, in particular activating the struts2 dev mode -->
    <profile>
      <id>dev</id>
      <properties>
        <devMode>true</devMode>
        <devModeNegated>false</devModeNegated>
      </properties>
    </profile>

  </profiles>
</project>
