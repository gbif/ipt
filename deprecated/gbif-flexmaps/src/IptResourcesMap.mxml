<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	verticalScrollPolicy="off" horizontalScrollPolicy="off" backgroundColor="#c7e2ff"
	layout="absolute" xmlns:maps="com.google.maps.*"
	creationComplete="checkParams()" xmlns:local="*" resize="onResized(event)"
	borderStyle="solid" borderColor="#c1cdda" borderThickness="1" xmlns:components="com.google.analytics.components.*">
	
<mx:Style source="style/fonts.css"/>
<mx:Style source="style/ui.css"/>

<mx:Script>
	<![CDATA[
		import com.google.maps.Color;
		import com.google.maps.MapMouseEvent;
		import com.google.maps.overlays.PolygonOptions;
		import com.google.maps.overlays.Polygon;
		import com.adobe.serialization.json.JSON;
		import com.google.maps.interfaces.IMapType;
		import mx.events.ResizeEvent;
		import mx.collections.Grouping;
		import mx.collections.GroupingField;
		import mx.collections.SummaryField;
		import mx.collections.SummaryRow;
		import mx.collections.ArrayCollection;
		import mx.rpc.events.ResultEvent;
		import com.google.maps.LatLng;
		import com.google.maps.LatLngBounds;
		import mx.controls.Alert;
		import mx.effects.easing.Exponential;
		import mx.core.UIComponent;
		import com.google.maps.MapZoomEvent;
		import com.google.maps.overlays.TileLayerOverlay;
		import com.google.maps.MapType;
		import com.google.maps.controls.MapTypeControl;
		import com.google.maps.controls.ZoomControl;
		import com.google.maps.controls.ControlPosition;
		
		
		private var mapMapType:IMapType;
		private var satMapType:IMapType;
		private var hibridMapType:IMapType;
		private var terrainMapType:IMapType;
		
		private var polygons:Array=new Array();
		private var polygonsData:Dictionary = new Dictionary();
		
		[Bindable]
		public var appWidth:Number=width;		
		public var mainCanvasState:String="map";
		
		[Bindable]
		private var resourcesAc:ArrayCollection = new ArrayCollection();	
		
		private var allResources:ArrayCollection;		
		
		
		private function checkParams():void {
			if (parameters.data.length==0) {
				Alert.show("The Widget has been loaded without specifying a taxon_id parameter");
				hugeCanvas.enabled=false;
			}
			
			var data:String =(parameters.data as String).replace(/\|\|/g, '"');
			//var data:String ='[{"id":9,"minx":35.453,"maxx":41.078,"miny":26.016,"maxy":41.133},{"id":10,"minx":27.422,"maxx":74.531,"miny":-23.906,"maxy":34.453}]';
			allResources= new ArrayCollection(JSON.decode(data));
			
			resourcesAc=allResources;
			providersCanvas.providersAdg.dataProvider=resourcesAc;	
			
		}
		
		private function onMapReady(event:Event):void {
			var topLeft:ControlPosition = new ControlPosition(ControlPosition.ANCHOR_TOP_LEFT,10,10);
		    var zoomControl:ZoomControl = new ZoomControl();
		    zoomControl.setControlPosition(topLeft);
		    map.addControl(zoomControl);
		    
		    map.setMapType(MapType.PHYSICAL_MAP_TYPE);
		    
		    var worldBBox:LatLngBounds = new LatLngBounds(new LatLng(-70,-170),new LatLng(70,170));
		    var wordZoom:Number = map.getBoundsZoomLevel(worldBBox);
		    map.setZoom(wordZoom);
		    
		    for each(var res:Object in resourcesAc) {
		    	
		    	var polOpt:PolygonOptions = new PolygonOptions({
				  strokeStyle: {
				    thickness: 1,
				    color: Color.BLACK,
				    alpha: 0.4
				  },
				  fillStyle: {
				    color: 0x00AC1A,
				    alpha: 1
				  },
				  tooltip: "Click to view "+res.title  		
		    	});
		   
		    	
		    	var pol:Polygon = new Polygon([
		    			new LatLng(res.miny,res.minx),
		    			new LatLng(res.maxy,res.minx),
		    			new LatLng(res.maxy,res.maxx),
		    			new LatLng(res.miny,res.maxx),
		    			new LatLng(res.miny,res.minx)],polOpt);
		    	
		    	pol.foreground.alpha=0.6;
		    	pol.addEventListener(MapMouseEvent.ROLL_OVER,function(ev:MapMouseEvent):void{
		    		(ev.target as Polygon).foreground.alpha=0.8;
		    	});			
		    	pol.addEventListener(MapMouseEvent.ROLL_OUT,function(ev:MapMouseEvent):void{
		    		(ev.target as Polygon).foreground.alpha=0.6;
		    	});			
		    	polygonsData[pol] = res;
		    	polygons.push(pol);		
		    	map.addOverlay(pol);		
		    }
		    
		    
		    map.addEventListener(MapMouseEvent.CLICK,onClick);
        	
		} 

		private function onClick(ev:MapMouseEvent):void {
			var polResults:Array = polygonsForPoint(ev.latLng);
			if (polResults.length==1) {
				var res:Object = polygonsData[polResults[0]];
				ExternalInterface.call("goToResource",res.id);
				//goToResource
			} else if (polResults.length>1) {
				var arr:ArrayCollection=new ArrayCollection();
				for each(var poli:Polygon in polResults) {
					arr.addItem(polygonsData[poli]);
				}
				resourcesAc=arr;
				providersCanvas.providersAdg.dataProvider=resourcesAc;	
				toggleMainCanvasState();
			} else {
			 //do nothing...	
			}
		}

	    private function polygonsForPoint(point:LatLng):Array { 
	    	var result:Array = new Array();
	        for each(var polygon:Polygon in polygons) {
		        var j:Number=0; 
		        var func_oddNodes:Boolean = false; 
		        var x:Number = point.lng(); 
		        var y:Number = point.lat(); 
		        for (var i:Number=0; i < polygon.getOuterVertexCount(); i++) { 
		          j++; 
		          if (j == polygon.getOuterVertexCount()) {j = 0;} 
		          if (((polygon.getOuterVertex(i).lat() < y) && (polygon.getOuterVertex(j).lat() >= y)) 
		          || ((polygon.getOuterVertex(j).lat() < y) && 
					(polygon.getOuterVertex(i).lat() >= y))) { 
		            if ( polygon.getOuterVertex(i).lng() + (y - polygon.getOuterVertex(i).lat()) 
		            /  (polygon.getOuterVertex(j).lat()-polygon.getOuterVertex(i).lat()) 
		            *  (polygon.getOuterVertex(j).lng() - polygon.getOuterVertex(i).lng())<x ) { 
		              func_oddNodes = !func_oddNodes 
		            } 
		          } 
		        } 
		        if (func_oddNodes) {
		        	result.push(polygon); 		        	
		        }
	        }
	        return result;
	      } 

		private var isResizing:Boolean=false;
		private function onResized(ev:ResizeEvent):void {
	        if(!isResizing) {
				appWidth=width;
				if (true) {
		            var tim:Timer = new Timer(500,1);
		            tim.addEventListener(TimerEvent.TIMER, function(event:TimerEvent):void {		
						appWidth=width;				
			            Application.application.validateNow();
			            isResizing=false;
		            });
		            tim.start();
		            isResizing=true;
	            }


			}	
		}

		public function toggleMainCanvasState():void {
			if (mainCanvasState=="map") {				
				mainCanvasState="coverFlow";
				hugeCanvas.move(appWidth*-1,0);
				
			} else {
				mainCanvasState="map";
				providersCanvas.providersAdg.dataProvider=resourcesAc=allResources;
				hugeCanvas.move(0,0);
			}
		}	
		
		public function toggleFullScreen():void{
            try {
                switch (Application.application.stage.displayState) {
                    case StageDisplayState.FULL_SCREEN:
                        Application.application.stage.displayState = StageDisplayState.NORMAL;
                        fullScreenButton.selected=false;
                        break;
                    default:
                        Application.application.stage.displayState = StageDisplayState.FULL_SCREEN;
                        fullScreenButton.selected=true;
                        break;
                }
            } catch (err:SecurityError) {
                // ignore
                trace(err.message);
            }
		}				

	]]>
</mx:Script>
	<mx:Canvas id="hugeCanvas" width="{appWidth*2}" horizontalScrollPolicy="off" verticalScrollPolicy="off" moveEffect="{moveEffect}" bottom="0" top="0">
		<mx:HBox horizontalGap="0" width="100%" height="100%">
			<mx:Canvas id="mapCanvas" width="50%" height="100%" x="0" horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<maps:Map id="map" width="100%" height="100%"
					key="{parameters.api_key}" 
					mapevent_mapready="onMapReady(event)"  />
						<mx:HBox horizontalGap="3" right="9" top="9"> 
						<mx:Button id="fullScreenButton" label="FULLSCREEN" styleName="smallButton" click="toggleFullScreen()" 
							useHandCursor="true" buttonMode="true" mouseChildren="false"
							height="20"/>
					</mx:HBox>
					<mx:Button label="VIEW RESOURCES" bottom="20" right="-3" 
						styleName="providersButton" width="100"
						useHandCursor="true" mouseChildren="false" buttonMode="true"
						click="toggleMainCanvasState()"/>
			</mx:Canvas>
			<mx:Canvas id="providerCanvas" width="50%" height="100%" x="{appWidth}">
				<local:ResourcesCanvas id="providersCanvas" width="100%" height="100%" /> 
			</mx:Canvas>
		</mx:HBox>
	</mx:Canvas>
    <mx:Move id="moveEffect" 
        duration="500" 
        easingFunction="{Exponential.easeInOut}" 
        perElementOffset="20"/>
        

	        	
</mx:Application>
