/*
 * Copyright 2010 Global Biodiversity Informatics Facility.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.gbif.provider.model;

import com.google.common.base.Preconditions;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.Transient;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.builder.EqualsBuilder;

/**
 * A mapping between a single extension property (concept) and a resource
 * represented via the viewMapping. A mapping can either be a fixed value
 * (String) or the column index of the result set generated by the viewMapping
 * SQL statement.
 * 
 */
@Entity
public class PropertyMapping implements BaseObject, Comparable<PropertyMapping> {

  public static PropertyMapping newInstance() {
    PropertyMapping pm = new PropertyMapping();
    return pm;
  }

  public static PropertyMapping newInstance(ExtensionProperty property) {
    PropertyMapping pm = newInstance();
    pm.setProperty(property);
    return pm;
  }

  /**
   * This static factory method returns a new instance of
   * {@link PropertyMapping} configured with an {@link ExtensionProperty},
   * column, and default value.
   * 
   * @param ep the extension property
   * @param column the column
   * @param value the default value
   */
  public static PropertyMapping with(ExtensionProperty ep, String column,
      String value) {
    Preconditions.checkNotNull(ep, "Extension property is null");
    Preconditions.checkNotNull(column, "Column is null");
    Preconditions.checkArgument(column.length() > 0, "Column has no value");
    return new PropertyMapping(ep, column, value);
  }

  private Long id;
  private ExtensionMapping viewMapping;
  private ExtensionProperty property;
  private String column;
  private Transformation termTransformation;
  private String value;

  public PropertyMapping() {
  }

  private PropertyMapping(ExtensionProperty ep, String column, String value) {
    property = ep;
    this.column = column;
    this.value = value;
  }

  /**
   * Natural sort order is by viewMapping, then extension property
   * 
   * @see java.lang.Comparable#compareTo(Object)
   */
  public int compareTo(PropertyMapping propMap) {
    int viewCmp = viewMapping.compareTo(propMap.viewMapping);
    return (viewCmp != 0 ? viewCmp : property.compareTo(propMap.property));
  }

  /**
   * @see java.lang.Object#equals(Object)
   */
  @Override
  public boolean equals(Object object) {
    if (!(object instanceof PropertyMapping)) {
      return false;
    }
    PropertyMapping rhs = (PropertyMapping) object;
    return new EqualsBuilder().append(this.column, rhs.column).append(
        this.property, rhs.property).append(this.viewMapping, rhs.viewMapping).append(
        this.id, rhs.id).isEquals();
  }

  public String getColumn() {
    return column;
  }

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  public Long getId() {
    return id;
  }

  @ManyToOne
  public ExtensionProperty getProperty() {
    return property;
  }

  @ManyToOne
  public Transformation getTermTransformation() {
    return termTransformation;
  }

  @Transient
  public Long getTermTransformationId() {
    if (termTransformation == null) {
      return null;
    }
    return termTransformation.getId();
  }

  public String getValue() {
    return value;
  }

  @ManyToOne(optional = false)
  // @JoinColumn(name="view_mapping_fk", insertable=false, updatable=false,
  // nullable=false)
  public ExtensionMapping getViewMapping() {
    return viewMapping;
  }

  /**
   * @see java.lang.Object#hashCode()
   */
  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * (property != null ? property.hashCode() : 0);
    result = 31 * (column != null ? column.hashCode() : 0);
    result = 31 * (value != null ? value.hashCode() : 0);
    result = 31 * (viewMapping != null ? viewMapping.getExtension().hashCode()
        : 0);
    return result;
  }

  /**
   * Indicate wether this mapping has some true mapping content
   * 
   * @return
   */
  @Transient
  public boolean isEmpty() {
    if (StringUtils.trimToNull(column) == null && getValue() == null) {
      return true;
    }
    return false;
  }

  public void setColumn(String column) {
    this.column = StringUtils.trimToNull(column);
  }

  public void setId(Long id) {
    this.id = id;
  }

  public void setProperty(ExtensionProperty property) {
    this.property = property;
  }

  public void setTermTransformation(Transformation termTransformation) {
    this.termTransformation = termTransformation;
  }

  public void setValue(String value) {
    if (value != null) {
      value = value.trim();
      if (value.length() < 1) {
        value = null;
      }
    }
    this.value = value;
  }

  public void setViewMapping(ExtensionMapping viewMapping) {
    this.viewMapping = viewMapping;
  }

  /**
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    return String.format("%s=>%s", property == null ? "null"
        : property.getName(), value == null
        ? (column == null ? "null" : column) : "#" + value);
  }

}
