<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
                        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd"
	default-lazy-init="true" default-init-method="init"
	default-destroy-method="destroy">

	<context:annotation-config />
	<context:component-scan base-package="org.gbif.provider" />

	<!-- Enable @Transactional support -->
	<tx:annotation-driven transaction-manager="transactionManager" />


	<!-- APPLICATION CONFIGURATION -->

	<!--
		For application settings and future properties files. This custom
		resolver exposes 2 dynamic properties datadir & webappdir
	-->
	<bean id="propertyConfigurer" class="org.gbif.provider.util.WebContextPropertyResolver">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="testWebappDir"
			value="${project.build.testOutputDirectory}/test-webapp" />
		<property name="locations">
			<list>
				<value>classpath:application.properties</value>
				<value>classpath:ipt.properties</value>
			</list>
		</property>
	</bean>

	<bean id="providerCfgManager"
		class="org.gbif.provider.service.impl.ProviderCfgManagerHibernate"
		parent="abstractManager" />
	<bean id="cfg" class="org.gbif.provider.util.AppConfig">
		<constructor-arg ref="providerCfgManager" />
		<constructor-arg value="${webappDir}" />
		<constructor-arg value="${dataDir}" />
		<constructor-arg value="${registryUrl}" />
		<constructor-arg value="${gbif.analytics.key}" />
		<constructor-arg value="${project.version}" />
		<constructor-arg value="${copyright.year}" />
		<constructor-arg value="${full.text.search.hit.count}" />
	</bean>


	<!-- Utility singletons -->
	<bean id="mapUtil" class="org.gbif.provider.geo.MapUtil" />
	<bean id="wgs84Util" class="org.gbif.provider.geo.TransformationUtils" />


	<!-- Parsing freemarker templates other than struts2 -->
	<bean id="freemarkerCfg" class="freemarker.template.Configuration">
		<property name="defaultEncoding" value="utf8" />
		<property name="directoryForTemplateLoading" value="${webappDir}"></property>
	</bean>



	<!-- Struts Interceptors -->
	<bean id="managerInterceptor" class="org.gbif.provider.webapp.interceptor.ManagerInterceptor" />

	<bean id="resourceInterceptor"
		class="org.gbif.provider.webapp.interceptor.ResourceInterceptor" />
	<bean id="adminInterceptor"
		class="org.gbif.provider.webapp.interceptor.UserRoleAuthorizationInterceptor">
		<property name="authorizedRoles" value="ROLE_ADMIN" />
	</bean>

	<bean id="localeInterceptor" class="org.gbif.provider.webapp.interceptor.LocaleInterceptor">
		<property name="defaultLocale" value="${defaultLocale}" />
	</bean>

	<!-- MODEL FACTORIES -->
	<bean id="extensionFactory" class="org.gbif.provider.model.factory.ExtensionFactory" />

	<bean id="resourceFactory" class="org.gbif.provider.model.factory.ResourceFactory">
		<constructor-arg ref="extensionManager" />
	</bean>

	<!-- STRUTS ACTIONS -->
	<bean id="emlEditorAction" scope="prototype"
		class="org.gbif.provider.webapp.action.manage.EmlEditorAction" />


	<!--
		Entity Interceptor bean - sets audit fields for each persistent object
	-->
	<bean id="entityInterceptor" class="org.gbif.provider.model.hibernate.AuditInterceptor">
	</bean>

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="entityInterceptor">
			<ref local="entityInterceptor" />
		</property>
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=${hibernate.dialect}
				hibernate.query.substitutions=true 'Y', false 'N'
				hibernate.cache.use_second_level_cache=true
				hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
            </value>
			<!-- Turn batching off for better error messages under PostgreSQL -->
			<!-- hibernate.jdbc.batch_size=0 -->
		</property>
		<property name="namingStrategy" ref="namingStrategy" />
	</bean>

	<bean id="namingStrategy" class="${hibernate.namingStrategy}" />

	<!--
		Transaction manager for a single Hibernate SessionFactory (alternative
		to JTA)
	-->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!--
		UniversalDao - can be used when doing standard CRUD - made available
		for those who don't mind casting. If you don't want to cast, look at
		'fooDao' below.
	-->
	<bean id="universalDao" class="org.gbif.provider.dao.hibernate.UniversalDaoHibernate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="lookupDao" class="org.gbif.provider.dao.hibernate.LookupDaoHibernate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="userDao" class="org.gbif.provider.dao.hibernate.UserDaoHibernate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="roleDao" class="org.gbif.provider.dao.hibernate.RoleDaoHibernate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>



	<!--  IPT MANAGER  -->
	<bean id="abstractManager" abstract="true">
		<!--property name="sessionFactory" ref="sessionFactory"/-->
	</bean>
	<bean id="abstractJDBCManager" abstract="true">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="annotationManager"
		class="org.gbif.provider.service.impl.AnnotationManagerHibernate"
		parent="abstractManager" />

	<bean id="occResourceManager"
		class="org.gbif.provider.service.impl.OccResourceManagerHibernate"
		parent="abstractManager" />
	<bean id="checklistResourceManager"
		class="org.gbif.provider.service.impl.ChecklistResourceManagerHibernate"
		parent="abstractManager" />
	<bean id="dataResourceManager"
		class="org.gbif.provider.service.impl.DataResourceManagerHibernate"
		parent="abstractManager">
		<constructor-arg value="org.gbif.provider.model.DataResource" />
	</bean>
	<bean id="resourceManager"
		class="org.gbif.provider.service.impl.GenericResourceManagerHibernate"
		parent="abstractManager">
		<constructor-arg value="org.gbif.provider.model.Resource" />
	</bean>

	<bean id="resourceKeywordManager"
		class="org.gbif.provider.service.impl.ResourceKeywordManagerJDBC"
		parent="abstractJDBCManager" />

	<bean id="sourceManager" class="org.gbif.provider.service.impl.SourceManagerHibernate"
		parent="abstractManager" />

	<bean id="viewMappingManager"
		class="org.gbif.provider.service.impl.ViewMappingManagerHibernate"
		parent="abstractManager" />

	<bean id="propertyMappingManager" class="org.gbif.provider.service.impl.GenericManagerHibernate"
		parent="abstractManager">
		<constructor-arg value="org.gbif.provider.model.PropertyMapping" />
	</bean>

	<bean id="transformationManager"
		class="org.gbif.provider.service.impl.TransformationManagerHibernate"
		parent="abstractManager" />

	<bean id="termMappingManager"
		class="org.gbif.provider.service.impl.TermMappingManagerHibernate"
		parent="abstractManager" />

	<bean id="extensionManager"
		class="org.gbif.provider.service.impl.ExtensionManagerHibernate"
		parent="abstractManager" />

	<bean id="extensionPropertyManager"
		class="org.gbif.provider.service.impl.ExtensionPropertyManagerHibernate"
		parent="abstractManager" />

	<bean id="thesaurusManager"
		class="org.gbif.provider.service.impl.ThesaurusManagerHibernate"
		parent="abstractManager" />

	<bean id="uploadEventManager"
		class="org.gbif.provider.service.impl.UploadEventManagerHibernate"
		parent="abstractManager" />

	<bean id="emlManager" class="org.gbif.provider.service.impl.EmlManagerImpl" />

	<bean id="registryManager" class="org.gbif.provider.service.impl.RegistryManagerImpl" />

	<!-- cache / import manager -->
	<bean id="extensionRecordManager"
		class="org.gbif.provider.service.impl.ExtensionRecordManagerJDBC"
		parent="abstractJDBCManager" />

	<bean id="sourceInspectionManager"
		class="org.gbif.provider.service.impl.SourceInspectionManagerImpl" />

	<bean id="imageCacheManager" class="org.gbif.provider.service.impl.ImageCacheManagerImpl" />

	<bean id="resourceArchiveManager"
		class="org.gbif.provider.service.impl.ResourceArchiveManagerImpl"
		parent="abstractManager" />

    <bean id="archiveUtil"
        class="org.gbif.provider.util.ArchiveUtil"
        parent="abstractManager" />


	<bean id="cacheManager" class="org.gbif.provider.service.impl.CacheManagerJDBC"
		parent="abstractJDBCManager" lazy-init="true">
		<lookup-method name="newOccUploadTask" bean="occUploadTask" />
		<lookup-method name="newChecklistUploadTask" bean="checklistUploadTask" />
	</bean>


	<!-- FULL TEXT SEARCHING -->
	<bean id="fullTextSearchManager"
		class="org.gbif.provider.service.impl.FullTextSearchManagerLucene" />



	<!--
		===================================================================
	-->
	<!--
		AOP: Configuration and Aspects
	-->
	<!--
		===================================================================
	-->

	<aop:config>
		<aop:advisor id="userManagerTx" advice-ref="userManagerTxAdvice"
			pointcut="execution(* *..service.UserManager.*(..))" order="0" />
		<aop:advisor id="userManagerSecurity" advice-ref="userSecurityAdvice"
			pointcut="execution(* *..service.UserManager.saveUser(..))" order="1" />
	</aop:config>

	<tx:advice id="txAdvice">
		<tx:attributes>
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<tx:advice id="userManagerTxAdvice">
		<tx:attributes>
			<tx:method name="save*" rollback-for="UserExistsException" />
		</tx:attributes>
	</tx:advice>



	<bean id="userSecurityAdvice" class="org.gbif.provider.service.UserSecurityAdvice" />

	<!--
		===================================================================
	-->
	<!--
		Mail: Sender and Velocity configuration
	-->
	<!--
		===================================================================
	-->
	<bean id="mailEngine" class="org.gbif.provider.service.MailEngine">
		<property name="mailSender" ref="mailSender" />
		<property name="velocityEngine" ref="velocityEngine" />
		<property name="from" value="${mail.default.from}" />
	</bean>

	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${mail.host}" />
		<property name="defaultEncoding" value="UTF-8" />
		<!-- Uncomment if you need to authenticate with your SMTP Server -->
		<!--
			property name="username" value="${mail.username}"/> <property
			name="password" value="${mail.password}"/> <property
			name="javaMailProperties"> <value> mail.smtp.auth=true </value>
			</property
		-->
	</bean>

	<!-- Configure Velocity for sending e-mail -->
	<bean id="velocityEngine"
		class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
		<property name="velocityProperties">
			<props>
				<prop key="resource.loader">class</prop>
				<prop key="class.resource.loader.class">
					org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
				</prop>
				<prop key="velocimacro.library"></prop>
			</props>
		</property>
	</bean>

	<bean id="mailMessage" class="org.springframework.mail.SimpleMailMessage"
		scope="prototype">
		<property name="from" value="${mail.default.from}" />
	</bean>

	<!--
		===================================================================
	-->
	<!--
		Security class from Spring Security - used to configure Password
	-->
	<!--
		Encryption in UserManagerImpl. Can override in security.xml.
	-->
	<!--
		===================================================================
	-->
	<bean id="passwordEncoder"
		class="org.springframework.security.providers.encoding.ShaPasswordEncoder" />

	<!--
		===================================================================
	-->
	<!--
		Managers: For accessing DAOs
	-->
	<!--
		===================================================================
	-->
	<bean id="manager" class="org.gbif.provider.service.impl.UniversalManagerImpl">
		<property name="dao" ref="universalDao" />
	</bean>

	<bean id="lookupManager" class="org.gbif.provider.service.impl.LookupManagerImpl">
		<property name="lookupDao" ref="lookupDao" />
	</bean>

	<bean id="userManager" class="org.gbif.provider.service.impl.UserManagerImpl">
		<property name="userDao" ref="userDao" />
		<property name="passwordEncoder" ref="passwordEncoder" />
	</bean>

	<bean id="roleManager" class="org.gbif.provider.service.impl.RoleManagerImpl">
		<property name="roleDao" ref="roleDao" />
	</bean>



	<bean id="textProvider" class="org.gbif.provider.localization.SimpleTextProvider">
		<property name="baseBundleNames">
			<set>
				<value>ApplicationResources</value>
			</set>
		</property>
		<property name="defaultLocale" value="${defaultLocale}" />
		<property name="useSimpleProvider" value="${textprovider.simple}" />
	</bean>


	<bean id="darwinCoreFactory" class="org.gbif.provider.model.factory.DarwinCoreFactory" />

	<bean id="taxonFactory" class="org.gbif.provider.model.factory.TaxonFactory" />

	<bean id="regionFactory" class="org.gbif.provider.model.factory.RegionFactory" />


	<!-- IMPORT SOURCE -->
	<bean id="importSourceFactory"
		class="org.gbif.provider.datasource.impl.ImportSourceFactoryImpl">
		<lookup-method name="newFileImportSource" bean="fileImportSource" />
		<lookup-method name="newSqlImportSource" bean="sqlImportSource" />
	</bean>
	<bean id="fileImportSource" scope="prototype"
		class="org.gbif.provider.datasource.impl.FileImportSource" />
	<bean id="sqlImportSource" scope="prototype"
		class="org.gbif.provider.datasource.impl.SqlImportSource" />


	<!-- TASK EXECUTOR -->

	<bean id="uploadExecutor" factory-method="newSingleThreadExecutor"
		class="java.util.concurrent.Executors">
		<!-- max number of concurrent uploads -->
		<!--constructor-arg value="1"/-->
	</bean>
	<bean id="processingExecutor" factory-method="newFixedThreadPool"
		class="java.util.concurrent.Executors">
		<!--
			max number of concurrent processing threads. Default is 2x max
			concurrent uploads
		-->
		<constructor-arg value="2" />
	</bean>

	<!-- All tasks are non-singleton (prototype) -->
	<bean id="occUploadTask" scope="prototype"
		class="org.gbif.provider.task.OccUploadTask" />
	<bean id="checklistUploadTask" scope="prototype"
		class="org.gbif.provider.task.ChecklistUploadTask" />



	<bean id="occStatManager" class="org.gbif.provider.service.impl.OccStatManagerHibernate"
		parent="abstractManager" />

	<bean id="darwinCoreManager"
		class="org.gbif.provider.service.impl.DarwinCoreManagerHibernate"
		parent="abstractManager" />

	<bean id="taxonManager" class="org.gbif.provider.service.impl.TaxonManagerHibernate"
		parent="abstractManager" />

	<bean id="regionManager" class="org.gbif.provider.service.impl.RegionManagerHibernate"
		parent="abstractManager" />

	<bean id="hqlTester" class="org.gbif.provider.service.impl.HqlTesterHibernate"
		parent="abstractManager" />

	<bean id="geoserverManager" class="org.gbif.provider.service.impl.GeoserverManagerImpl" />

</beans>